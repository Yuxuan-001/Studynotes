import{_ as i,c as s,o as a,U as l}from"./chunks/framework.msm6HyOv.js";const g=JSON.parse('{"title":"html 经典面试题","description":"","frontmatter":{},"headers":[],"relativePath":"srca/interview/html.md","filePath":"srca/interview/html.md"}'),t={name:"srca/interview/html.md"},e=l(`<h1 id="html-经典面试题" tabindex="-1">html 经典面试题 <a class="header-anchor" href="#html-经典面试题" aria-label="Permalink to &quot;html 经典面试题&quot;">​</a></h1><h2 id="_1-src和href区别" tabindex="-1">1.src和href区别 <a class="header-anchor" href="#_1-src和href区别" aria-label="Permalink to &quot;1.src和href区别&quot;">​</a></h2><ul><li>href标识超文本引用，用在link和a等元素上，href是引用和页面关联，是在当前元素和引用资源之间建立联系。</li><li>src表示引用资源，表示替换当前元素，用在img，script，iframe上，src是页面内容不可缺少的一部分。</li></ul><h2 id="_2-meta标签" tabindex="-1">2.meta标签 <a class="header-anchor" href="#_2-meta标签" aria-label="Permalink to &quot;2.meta标签&quot;">​</a></h2><ul><li><code>charset</code>，用来描述HTML文档的编码类型</li><li><code>keywords</code>，页面关键词</li><li><code>description</code>，页面描述</li><li><code>refresh</code>，页面重定向和刷新</li><li><code>viewport</code>，适配移动端，可以控制视口的大小和比例</li></ul><h2 id="_3-html5有哪些更新" tabindex="-1">3.HTML5有哪些更新 <a class="header-anchor" href="#_3-html5有哪些更新" aria-label="Permalink to &quot;3.HTML5有哪些更新&quot;">​</a></h2><h3 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  头部</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  导航栏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  区块（有语义化的div）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  主要区域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">article</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">article</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  主要内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  侧边栏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  底部</span></span></code></pre></div><h3 id="媒体标签" tabindex="-1">媒体标签 <a class="header-anchor" href="#媒体标签" aria-label="Permalink to &quot;媒体标签&quot;">​</a></h3><p>(1) audio 音频</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">audio</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autoplay</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">audio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>属性：</p><ul><li>controls 控制面板</li><li>autoplay 自动播放</li><li>loop=‘true’ 循环播放</li></ul><p>(2) video 视频</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> poster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;imgs/aa.jpg&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>属性：</p><ul><li>poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定</li><li>controls 控制面板</li><li>width</li><li>height</li></ul><p>(3) source 标签</p><p>因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aa.flv&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video/flv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aa.mp4&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video/mp4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="表单" tabindex="-1">表单 <a class="header-anchor" href="#表单" aria-label="Permalink to &quot;表单&quot;">​</a></h3><p>表单类型:</p><ul><li>email ：能够验证当前输入的邮箱地址是否合法</li><li>url ： 验证URL</li><li>number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。</li><li>search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。</li><li>range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值</li><li>color ： 提供了一个颜色拾取器</li><li>time ： 时分秒</li><li>date ： 日期选择年月日</li><li>datatime ： 时间和日期(目前只有Safari支持)</li><li>datatime-local ：日期时间控件</li><li>week ：周控件</li><li>month：月控件</li></ul><p>表单属性:</p><ul><li>placeholder ：提示信息</li><li>autofocus ：自动获取焦点</li><li>autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提： <ul><li>表单必须提交过</li><li>必须有name属性</li></ul></li><li>required：要求输入框不能为空，必须有值才能够提交</li><li>pattern=&quot; &quot; 里面写入想要的正则模式，例如手机号pattern=&quot;^(+86)?\\d{10}$&quot;</li><li>multiple：可以选择多个文件或者多个邮箱</li><li>form=&quot; form表单的ID&quot;</li></ul><p>表单事件：</p><ul><li>oninput 每当input里的输入框内容发生变化都会触发此事件</li><li>oninvalid 当验证不通过时触发此事件</li></ul><h3 id="进度条、度量器" tabindex="-1">进度条、度量器 <a class="header-anchor" href="#进度条、度量器" aria-label="Permalink to &quot;进度条、度量器&quot;">​</a></h3><ul><li>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</li><li>meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持） <ul><li>high/low：规定被视作高/低的范围</li><li>max/min：规定最大/小值</li><li>value：规定当前度量值</li></ul></li></ul><p>设置规则：min &lt; low &lt; high &lt; max</p><h3 id="dom查询操作" tabindex="-1">DOM查询操作 <a class="header-anchor" href="#dom查询操作" aria-label="Permalink to &quot;DOM查询操作&quot;">​</a></h3><ul><li>document.querySelector()</li><li>document.querySelectorAll()</li></ul><p>它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)</p><h3 id="web存储" tabindex="-1">Web存储 <a class="header-anchor" href="#web存储" aria-label="Permalink to &quot;Web存储&quot;">​</a></h3><p>HTML5 提供了两种在客户端存储数据的新方法:</p><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 用于临时保存同一窗口(或标签页)的数据</li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li><p>拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draggable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li><li><p>画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法</p></li><li><p>SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准</p></li><li><p>地理定位：Geolocation（地理定位）用于定位用户的位置</p></li></ul><p><strong>总结：</strong></p><ol><li>新增语义化标签：nav、header、footer、aside、section、article</li><li>音频、视频标签：audio、video</li><li>数据存储：localStorage、sessionStorage</li><li>canvas（画布）、Geolocation（地理定位）、websocket（通信协议）</li><li>input标签新增属性：placeholder、autocomplete、autofocus、required</li><li>history API：go、forward、back、pushstate</li></ol><h2 id="_4-img的srcset属性的作用" tabindex="-1">4.img的srcset属性的作⽤？ <a class="header-anchor" href="#_4-img的srcset属性的作用" aria-label="Permalink to &quot;4.img的srcset属性的作⽤？&quot;">​</a></h2><p>响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image-128.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image-256.png 2x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png</p><p>按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image-128.png&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image-128.png 128w, image-256.png 256w, image-512.png 512w&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     sizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(max-width: 360px) 340px, 128px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片</p><p>sizes语法如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sizes=&quot;[media query] [length], [media query] [length] ... &quot;</span></span></code></pre></div><p>sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px</p><h2 id="_5-行内元素有哪些-块级元素有哪些-空-void-元素有那些" tabindex="-1">5.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？ <a class="header-anchor" href="#_5-行内元素有哪些-块级元素有哪些-空-void-元素有那些" aria-label="Permalink to &quot;5.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？&quot;">​</a></h2><ul><li>行内元素有：<code>a b span img input select strong</code></li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code></li></ul><h2 id="_6-对-web-worker-的理解" tabindex="-1">6.对 web worker 的理解 <a class="header-anchor" href="#_6-对-web-worker-的理解" aria-label="Permalink to &quot;6.对 web worker 的理解&quot;">​</a></h2><p><a href="https://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noreferrer">Web Worker 使用教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><h2 id="_7-html5的离线储存怎么使用-它的工作原理是什么" tabindex="-1">7.HTML5的离线储存怎么使用，它的工作原理是什么 <a class="header-anchor" href="#_7-html5的离线储存怎么使用-它的工作原理是什么" aria-label="Permalink to &quot;7.HTML5的离线储存怎么使用，它的工作原理是什么&quot;">​</a></h2><p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p><p>**原理：**HTML5的离线存储是基于一个新建的 <code>.appcache</code> 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p><p><strong>使用方法：</strong></p><p>（1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> manifest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.manifest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>（2）在 <code>cache.manifest</code> 文件中编写需要离线存储的资源：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CACHE MANIFEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    #v0.11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CACHE:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js/app.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    css/style.css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NETWORK:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resourse/logo.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FALLBACK:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    / /offline.html</span></span></code></pre></div><ul><li><strong>CACHE</strong>:表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来</li><li><strong>NETWORK</strong>: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高</li><li><strong>FALLBACK</strong>: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html</li></ul><p>（3）在离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作</p><p><strong>如何更新缓存：</strong></p><ul><li>(1) 更新 manifest 文件</li><li>(2) 通过 javascript 操作</li><li>(3) 清除浏览器缓存</li></ul><p><strong>注意事项：</strong></p><p>(1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）</p><p>(2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存</p><p>(3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下</p><p>(4）FALLBACK 中的资源必须和 manifest 文件同源</p><p>(5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源</p><p>(6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问</p><p>(7）当 manifest 文件发生改变时，资源请求本身也会触发更新</p><h2 id="_8-浏览器是如何对-html5-的离线储存资源进行管理和加载" tabindex="-1">8.浏览器是如何对 HTML5 的离线储存资源进行管理和加载？ <a class="header-anchor" href="#_8-浏览器是如何对-html5-的离线储存资源进行管理和加载" aria-label="Permalink to &quot;8.浏览器是如何对 HTML5 的离线储存资源进行管理和加载？&quot;">​</a></h2><ul><li><strong>在线的情况下</strong>，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储</li><li><strong>离线的情况下</strong>，浏览器会直接使用离线存储的资源</li></ul><h2 id="_9-渐进增强与优雅降级" tabindex="-1">9.渐进增强与优雅降级 <a class="header-anchor" href="#_9-渐进增强与优雅降级" aria-label="Permalink to &quot;9.渐进增强与优雅降级&quot;">​</a></h2><p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验</p><p>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p><p><strong>两者区别:</strong></p><ul><li>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要</li><li>降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带</li></ul><h2 id="_10-拖拽api" tabindex="-1">10.拖拽api <a class="header-anchor" href="#_10-拖拽api" aria-label="Permalink to &quot;10.拖拽api&quot;">​</a></h2><table><thead><tr><th>事件</th><th>On 型事件处理程序</th><th>触发时刻</th></tr></thead><tbody><tr><td><code>darg</code></td><td><code>ondrag</code></td><td>当拖拽元素或选中的文本时触发</td></tr><tr><td><code>dragend</code></td><td><code>ondragend</code></td><td>当拖拽操作结束时触发 (比如松开鼠标按键或敲“Esc”键)</td></tr><tr><td><code>dragenter</code></td><td><code>ondragenter</code></td><td>当拖拽元素或选中的文本到一个可释放目标时触发</td></tr><tr><td><code>dragleave</code></td><td><code>ondragleave</code></td><td>当拖拽元素或选中的文本离开一个可释放目标时触发</td></tr><tr><td><code>dragover</code></td><td><code>ondragover</code></td><td>当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）</td></tr><tr><td><code>dragstart</code></td><td><code>ondragstart</code></td><td>当用户开始拖拽一个元素或选中的文本时触发</td></tr><tr><td><code>drop</code></td><td><code>ondrop</code></td><td>当元素或选中的文本在可释放目标上被释放时触发</td></tr></tbody></table><p><strong>注意：</strong></p><p>当从操作系统向浏览器中拖拽文件时，不会触发 <code>dragstart</code> 和<code>dragend</code> 事件</p><h2 id="_11-iframe的优缺点" tabindex="-1">11.iframe的优缺点 <a class="header-anchor" href="#_11-iframe的优缺点" aria-label="Permalink to &quot;11.iframe的优缺点&quot;">​</a></h2><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>可以用来加载速度较慢的内容（如广告）。</li><li>可以使脚本并行下载。</li><li>可以实现跨子域tongxin</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>iframe 会阻塞主页面的 onload 事件。</li><li>无法被一些搜索引擎索识别。</li><li>会产生很多页面，不容易管理。</li></ul><h2 id="_12-严格模式与混杂模式" tabindex="-1">12.严格模式与混杂模式 <a class="header-anchor" href="#_12-严格模式与混杂模式" aria-label="Permalink to &quot;12.严格模式与混杂模式&quot;">​</a></h2><ul><li>严格模式：以浏览器支持的最高标准运行。</li><li>混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为。</li></ul><h2 id="_13-canvas-和-svg-有什么区别" tabindex="-1">13.Canvas 和 SVG 有什么区别 <a class="header-anchor" href="#_13-canvas-和-svg-有什么区别" aria-label="Permalink to &quot;13.Canvas 和 SVG 有什么区别&quot;">​</a></h2><p>Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的。</p><h3 id="canvas" tabindex="-1">Canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;Canvas&quot;">​</a></h3><ul><li>通过 Javascript 来绘制 2D 图形。</li><li>是逐像素进行渲染的。</li><li>其位置发生改变，会重新进行绘制。</li></ul><h3 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG&quot;">​</a></h3><ul><li>一种使用 XML 描述的 2D 图形的语言。</li><li>SVG 基于 XML 意味着，SVG DOM 中的每个元素都是可用的，可以为某个元素附加 Javascript 事件处理器。</li><li>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</li></ul><h3 id="比较" tabindex="-1">比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;比较&quot;">​</a></h3><p><strong>Canvas</strong></p><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><p><strong>SVG</strong></p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><h3 id="viewport-属性值" tabindex="-1">Viewport 属性值 <a class="header-anchor" href="#viewport-属性值" aria-label="Permalink to &quot;Viewport 属性值&quot;">​</a></h3><ul><li>width 设置 layout viewport 的宽度，为一个正整数，或字符串&quot;width-device&quot;</li><li>initial-scale 设置页面的初始缩放值，为一个数字，可以带小数</li><li>minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数</li><li>maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数</li><li>height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用</li><li>user-scalable 是否允许用户进行缩放，值为&quot;no&quot;或&quot;yes&quot;, no 代表不允许，yes 代表允许这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。</li></ul>`,106),h=[e];function n(p,r,d,k,o,E){return a(),s("div",null,h)}const u=i(t,[["render",n]]);export{g as __pageData,u as default};
